from collections import defaultdict


def read_file(filename):
    host2req = defaultdict(int)
    with open(filename) as file:
        for line in file:
            line_list = line.split()
            host2req[line_list[0]] += 1

    file = open("records_"+filename, "w")
    for host in host2req:
        file.write(host+" "+str(host2req[host])+"\n")
    file.close()


file_name = input()
read_file(file_name)
def maxDepth(root):
    if not root:
        return 0
    max_depth = [1]
    dfs(root, 1, max_depth)
    return max_depth[0]


def dfs(root, depth, max_depth):
    if max_depth[0] < depth:
        max_depth[0] = depth

    if root:
        for child in root.children:
            dfs(child, depth + 1, max_depth)
            
def find_idx(sorted_arr, target):
    length = len(sorted_arr)
    left = 0
    right = length-1
    while (left <= right) and (right >= 0) and (left < length):

        middle = (left+right)//2
        if sorted_arr[middle] == target:

            return middle

        elif sorted_arr[middle] < target:
            left = middle+1
        else:
            right = middle-1

    return left
def move_zeros(arr):
    i = j = 0
    while i < len(arr):
        if arr[i] > 0:
            arr[j] = arr[i]
            j += 1
        i += 1

    while j < len(arr):
        arr[j] = 0
        j += 1

    return arr
def numberOfPaths(mat):
    # Write your code here
    tabulation = [[0] * len(mat[0]) for i in mat]

    if mat[0][0] == 1: tabulation[0][0] = 1

    for i in range(1, len(mat)):
        if mat[i][0] == 1:
            tabulation[i][0] = tabulation[i - 1][0]

    for j in range(1, len(mat[0])):
        if mat[0][j] == 1:
            tabulation[0][j] = tabulation[0][j - 1]

    for i in range(1, len(mat)):
        for j in range(1, len(mat[0])):
            if mat[i][j] == 1:
                tabulation[i][j] = tabulation[i - 1][j] + tabulation[i][j - 1]

    return tabulation[-1][-1] % (10 ** 9 + 7)    
    
